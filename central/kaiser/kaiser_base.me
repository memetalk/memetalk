meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

requires re2, io
where
  re2 = central:re2/0.0.1/re2
  io = central:linux/0.0.1/io
end

class ParseError < Exception
class_method throw: fun(line, msg) {
  return this.new("line " + line.toString + ": " + msg).throw;
}
end

class Skol
fields: parser, rx, current_match, line, real_pos, pos, input;
init new: fun(parser, text, r_tokens, total_keywords, id_token) {
  @parser = parser;
  @rx = re2.Scanner.new(r_tokens, total_keywords, id_token, text);
  @line = 1;
  @pos = 0;
  @real_pos = 0;
  @input = text;
  @current_match = :invalid;
}
instance_method engine: fun() {
  return @rx;
}
instance_method _consume_whitespace: fun() {
  //consume withspaces without updating publicly visible @pos
  var spaces = @rx.match_regexp("(\s|//[^\\n]*)*");
  if (spaces) {
    @line += spaces.count("\n");
    @real_pos += spaces.size;
  }
}
instance_method consume_whitespace: fun() {
  //consume withspaces updating publicly visible @pos
  this._consume_whitespace();
  @pos = @real_pos;
}
instance_method match_regexp: fun(expr) {
  var res = @rx.match_regexp(expr);
  if (res) {
    @real_pos += res.size;
    @pos = @real_pos;
  }
  return res;
}
instance_method match_next: fun() {
  this._consume_whitespace();
  return @rx.match();
}
instance_method match: fun(num) {
  var res = @current_match;
  @current_match = :invalid;

  if (res == :invalid) {
    res = this.match_next();
  }

  if (!res) { //either EOF or tokens can't parse
    ParseError.throw(@line, "expected: " + @parser.token_name(num) + ", got EOF");
  }

  if (res.has(num)) {
    var x = @rx.consume(num);
    @real_pos += x.size;
    @pos = @real_pos;
    return x;
  } else {
    ParseError.throw(@line, "expected: " + @parser.token_name(num) + ", got: " + res.map(fun(x) { @parser.token_name(x) }).toString);
  }
}
instance_method current_line: fun() {
  return @line;
}
instance_method current_position: fun() {
  return @pos;
}
instance_method input: fun() {
  return @input;
}
instance_method looakead_any: fun(token_id_list) {
  if (@current_match == :invalid) {
    @current_match = this.match_next();
  }

  if (@current_match) {
    return token_id_list.any(fun(x) { @current_match.has(x) });
  } else {
    return false;
  }
}
end

class KaiserBase
fields: scanner, token_mappings;
init new: fun(text, token_mappings, total_keywords, id_token) {
  var regexps = token_mappings.values.ordered_by(fun(x,y) {
                   x[:id] < y[:id]
                }).map(fun(v) { v[:regexp] });
  @scanner = Skol.new(this, text, regexps, total_keywords, id_token);
  @token_mappings = token_mappings;
}
instance_method scanner: fun() {
  return @scanner;
}
instance_method lookahead_any: fun(token_id_list) {
  if (token_id_list.has(:empty)) {
    return true;
  } else {
    return @scanner.looakead_any(token_id_list);
  }
}
instance_method match: fun(token_id) {
  return @scanner.match(token_id);
}
instance_method token_name: fun(id) {
  @token_mappings.each(fun(_, x) {
    if (x[:id] == id) {
      ^ x[:name].toString;
    }
  });
  Exception.throw("token not found: " + id.toString);
}
instance_method current_line: fun() {
  return @scanner.current_line;
}
instance_method current_position: fun() {
  return [@scanner.current_position, @scanner.current_line];
}
instance_method position_after_spaces: fun() {
  @scanner.consume_whitespace();
  return [@scanner.current_position, @scanner.current_line];
}
instance_method match_regexp: fun(expr) {
  return @scanner.match_regexp(expr);
}
instance_method input: fun() {
  return @scanner.input;
}
instance_method unexpected: fun(tokens) {
  ParseError.throw(this.current_line, "expected one of " + tokens.map(fun(x) { this.token_name(x) }).toSource);
}
end
