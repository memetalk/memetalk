meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

requires ometa_base
where
  ometa_base = central:ometa/0.0.2/ometa_base
  import OMetaBase from ometa_base
end

escaped: fun(chr) {
  if (chr == "b") { return  "\b"; }
  if (chr == "f") { return  "\f"; }
  if (chr == "n") { return  "\n"; }
  if (chr == "r") { return  "\r"; }
  if (chr == "t") { return  "\t"; }
  if (chr == "v") { return  "\v"; }
  return chr;
}


class Kaiser < OMetaBase
fields: current_production, local_vars;
init new: fun(input) {
  super.new(input);
  @local_vars = [];
}


instance_method space: fun() {
  return this._or([fun() {
    this._apply_with_args(:seq, ["/*"]);
    this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["*/"]);});
        this._apply(:anything);
      }]);}, null);
    this._apply_with_args(:seq, ["*/"]);
  }, fun() {
    this._apply_with_args(:seq, ["//"]);
    this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["\n"]);});
        this._apply(:anything);
      }]);}, null);
    this._apply_with_args(:seq, ["\n"]);
  }, fun() {
    this._apply_super(:space);
  }]);
}
instance_method rule_name: fun() {
  var id = null;
  id = this._apply(:identifier);
  this._pred(id[0].isLower);
  return id;
}
instance_method terminal: fun() {
  var id = null;
  id = this._apply(:identifier);
  this._pred(id[0].isUpper);
  return id;
}
instance_method token_string: fun() {
  var c = null;
  var cs = null;
  this._apply_with_args(:token, ["\""]);
  cs = this._many1(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\""]);});
      this._apply_with_args(:seq, ["\\"]);
      c = this._apply(:char);
      return escaped(c);
    }, fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\""]);});
      this._apply(:char);
    }]);});
  this._apply_with_args(:seq, ["\""]);
  return [:token_string, cs.join("")];
}
instance_method start: fun() {
  var p = null;
  var t = null;
  var r = null;
  var e = null;
  p = this._apply(:prologue_code);
  t = this._apply(:tokens);
  r = this._apply(:rules);
  e = this._apply(:epilogue_code);
  return [:module, p, t, r, e];
}
instance_method prologue_code: fun() {
  var x = null;
  x = this._many(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["<kaiser>"]);});
      this._apply(:anything);
    }]);}, null);
  this._apply_with_args(:seq, ["<kaiser>"]);
  this._apply(:spaces);
  return x.join("");
}
instance_method epilogue_code: fun() {
  var r = null;
  this._apply_with_args(:token, ["</kaiser>"]);
  r = this._many(fun() {
    this._apply(:anything);}, null);
  return r.join("");
}
instance_method tokens: fun() {
  var r = null;
  this._apply_with_args(:token, ["tokens"]);
  this._apply_with_args(:token, ["{"]);
  r = this._many1(fun() {
    this._apply(:token_rules);});
  this._apply_with_args(:token, ["}"]);
  return r;
}
instance_method token_rules: fun() {
  var name = null;
  var s = null;
  return this._or([fun() {
    this._apply_with_args(:keyword,["key"]);
    name = this._apply(:identifier);
    this._apply_with_args(:token, ["="]);
    s = this._apply(:token_string);
    this._apply_with_args(:token, [";"]);
    return [:key_rule, name, s];
  }, fun() {
    this._apply_with_args(:keyword,["id"]);
    name = this._apply(:identifier);
    this._apply_with_args(:token, ["="]);
    s = this._apply(:token_string);
    this._apply_with_args(:token, [";"]);
    return [:id_rule, name, s];
  }, fun() {
    name = this._apply(:identifier);
    this._apply_with_args(:token, ["="]);
    s = this._or([fun() {
      this._apply(:token_string);
    }, fun() {
      this._apply(:host_expr);
    }]);
    this._apply_with_args(:token, [";"]);
    return [:token_rule, name, s];
  }]);
}
instance_method rules: fun() {
  var x = null;
  x = this._many1(fun() {
    this._apply(:rule);});
  return x;
}
instance_method rule: fun() {
  var name = null;
  var r = null;
  name = this._apply(:identifier);
  @current_production = name;
  r = this._apply_with_args(:rule_rest, [name]);
  this._apply_with_args(:token, [";"]);
  return r;
}
instance_method rule_rest: fun() {
  var c = null;
  var params = null;
  var name = this._apply(:anything);
  return this._or([fun() {
    this._apply_with_args(:token, ["="]);
    c = this._apply(:choices);
    return [:rule, name, [:args], c];
  }, fun() {
    params = this._many1(fun() {
      this._apply(:prod_param);});
    this._apply_with_args(:token, ["="]);
    c = this._apply(:choices);
    return [:rule, name, [:args] + params, c];
  }]);
}
instance_method prod_param: fun() {
  var b = null;
  this._apply(:spaces);
  b = this._apply(:binding);
  return b;
}
instance_method choices: fun() {
  var x = null;
  var xs = null;
  return this._or([fun() {
    x = this._apply(:choice);
    xs = this._many1(fun() {
      this._or([fun() {
        this._apply_with_args(:token, ["|"]);
        this._apply(:choice);
      }]);});
    return [:or, x] + xs;
  }, fun() {
    this._apply(:choice);
  }]);
}
instance_method choice: fun() {
  var x = null;
  var ac = null;
  return this._or([fun() {
    x = this._many(fun() {
      this._apply(:top_expression);}, null);
    ac = this._apply(:action);
    return x + [ac];
  }, fun() {
    x = this._many(fun() {
      this._apply(:top_expression);}, null);
    return x;
  }]);
}
instance_method top_expression: fun() {
  return this._or([fun() {
    this._apply(:bind_expression);
  }, fun() {
    this._apply(:repeated_expression);
  }, fun() {
    this._apply_with_args(:token, ["#!"]);
    return [:ns-position];
  }, fun() {
    this._apply_with_args(:token, ["#"]);
    return [:position];
  }]);
}
instance_method bind_expression: fun() {
  var e = null;
  var b = null;
  e = this._apply(:repeated_expression);
  b = this._apply(:binding);
  return [:bind, b, e];
}
instance_method repeated_expression: fun() {
  var x = null;
  x = this._apply(:term);
  return x;
}
instance_method term: fun() {
  var e = null;
  return this._or([fun() {
    this._apply_with_args(:token, ["?"]);
    e = this._apply(:element);
    return [:lookahead, e];
  }, fun() {
    this._apply(:element);
  }]);
}
instance_method binding: fun() {
  var s = null;
  this._apply_with_args(:seq, [":"]);
  s = this._apply_with_args(:first_and_rest, [:identifier_first,:identifier_rest]);
  return s.join("");
}
instance_method element: fun() {
  var s = null;
  return this._or([fun() {
    this._apply(:prod_app);
  }, fun() {
    this._apply(:data_element);
  }, fun() {
    this._apply_with_args(:token, ["{"]);
    s = this._apply(:host_expr);
    this._apply_with_args(:seq, ["}"]);
    return [:sem_action, s +";"];
  }]);
}
instance_method data_element: fun() {
  var x = null;
  x = this._apply(:token_string);
  return x;
}
instance_method host_str: fun() {
  var c = null;
  var cs = null;
  this._apply_with_args(:token, ["\""]);
  cs = this._many(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\""]);});
      this._apply_with_args(:seq, ["\\"]);
      c = this._apply(:char);
      return "\\" + c;
    }, fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\""]);});
      this._apply(:char);
    }]);}, null);
  this._apply_with_args(:seq, ["\""]);
  return "\"" + cs.join("") +"\"";
}
instance_method host_paren: fun() {
  var e = null;
  return this._or([fun() {
    this._apply_with_args(:seq, ["#("]);
    e = this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, [")"]);});
        this._apply(:host_element);
      }]);}, null);
    this._apply_with_args(:seq, [")"]);
    return ["(", e.join(""),").at(this, _pos)"].join("");
  }, fun() {
    this._apply_with_args(:seq, ["("]);
    e = this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, [")"]);});
        this._apply(:host_element);
      }]);}, null);
    this._apply_with_args(:seq, [")"]);
    return ["(", e.join(""),")"].join("");
  }]);
}
instance_method host_sq_brk: fun() {
  var e = null;
  return this._or([fun() {
    this._apply_with_args(:seq, ["#["]);
    e = this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["]"]);});
        this._apply(:host_element);
      }]);}, null);
    this._apply_with_args(:seq, ["]"]);
    return ["[", e.join(""),"].at(this, _pos)"].join("");
  }, fun() {
    this._apply_with_args(:seq, ["["]);
    e = this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["]"]);});
        this._apply(:host_element);
      }]);}, null);
    this._apply_with_args(:seq, ["]"]);
    return ["[", e.join(""),"]"].join("");
  }]);
}
instance_method host_c_brk: fun() {
  var e = null;
  this._apply_with_args(:seq, ["{"]);
  e = this._many(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["}"]);});
      this._apply(:host_element);
    }]);}, null);
  this._apply_with_args(:seq, ["}"]);
  return ["{", e.join(""),"}"].join("");
}
instance_method host_element: fun() {
  return this._or([fun() {
    this._apply(:host_str);
  }, fun() {
    this._apply(:host_paren);
  }, fun() {
    this._apply(:host_sq_brk);
  }, fun() {
    this._apply(:host_c_brk);
  }, fun() {
    this._apply(:anything);
  }]);
}
instance_method host_expr: fun() {
  var x = null;
  x = this._many1(fun() {
    this._or([fun() {
      this._not(fun() {
        this._or([fun() {
          this._apply_with_args(:seq, [";"]);
        }, fun() {
          this._apply_with_args(:seq, ["}"]);
        }, fun() {
          this._apply_with_args(:seq, ["|"]);
        }]);});
      this._apply(:host_element);
    }]);});
  return x.join("").trim();
}
instance_method action: fun() {
  var s = null;
  this._apply_with_args(:token, ["=>"]);
  s = this._apply(:host_expr);
  return [:action, s];
}
instance_method prod_app: fun() {
  var p = null;
  var args = null;
  var t = null;
  return this._or([fun() {
    p = this._apply(:rule_name);
    this._apply_with_args(:token, ["("]);
    args = this._apply(:prod_args);
    this._apply_with_args(:token, [")"]);
    return [:apply-with-args, args, p];
  }, fun() {
    p = this._apply(:rule_name);
    return [:apply, p];
  }, fun() {
    t = this._apply(:terminal);
    return [:terminal, t];
  }]);
}
instance_method prod_args: fun() {
  var x = null;
  var xs = null;
  x = this._apply(:prod_arg);
  xs = this._many(fun() {
    this._or([fun() {
      this._apply_with_args(:token, [","]);
      this._apply(:prod_arg);
    }]);}, null);
  return [x] + xs;
}
instance_method prod_arg: fun() {
  var i = null;
  var e = null;
  return this._or([fun() {
    this._apply(:data_element);
  }, fun() {
    i = this._apply(:identifier);
    return [:id, i];
  }, fun() {
    e = this._apply(:host_element);
    return [:host-expr, e];
  }]);
}


end
