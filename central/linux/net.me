meme central:memescript/0.0.3/compiler

@author: Lincoln Clarete <lincoln@clarete.li>;
@license: MIT;

class NetworkError < Exception
end

// Socket types
SOCK_STREAM: 1;         // stream (connection) socket
SOCK_DGRAM: 2;          // datagram (conn.less) socket
SOCK_RAW: 3;            // raw socket
SOCK_RDM: 4;            // reliably-delivered message
SOCK_SEQPACKET: 5;      // sequential packet socket

// Supported address families
AF_UNSPEC: 0;
AF_UNIX: 1;             // Unix domain sockets
AF_INET: 2;             // Internet IP Protocol
AF_AX25: 3;             // Amateur Radio AX.25
AF_IPX: 4;              // Novell IPX
AF_APPLETALK: 5;        // Appletalk DDP
AF_NETROM: 6;           // Amateur radio NetROM
AF_BRIDGE: 7;           // Multiprotocol bridge
AF_AAL5: 8;             // Reserved for Werner's ATM
AF_X25: 9;              // Reserved for X.25 project
AF_INET6: 10;           // IP version 6
AF_MAX: 12;             // For now..

// For setsockopt (from asm-generic/socket.h)
SOL_SOCKET: 1;

SO_DEBUG: 1;
SO_REUSEADDR: 2;
SO_TYPE: 3;
SO_ERROR: 4;
SO_DONTROUTE: 5;
SO_BROADCAST: 6;
SO_SNDBUF: 7;
SO_RCVBUF: 8;
SO_SNDBUFFORCE: 32;
SO_RCVBUFFORCE: 33;
SO_KEEPALIVE: 9;
SO_OOBINLINE: 10;
SO_NO_CHECK: 11;
SO_PRIORITY: 12;
SO_LINGER: 13;
SO_BSDCOMPAT: 14;
SO_REUSEPORT: 15;
SO_PASSCRED: 16;
SO_PEERCRED: 17;
SO_RCVLOWAT: 18;
SO_SNDLOWAT: 19;
SO_RCVTIMEO: 20;
SO_SNDTIMEO: 21;


getaddrinfo: fun(node, service, hints) {
  <primitive "net_getaddrinfo">
}

setsockopt: fun(sockfd, level, optname, optval) {
  <primitive "net_setsockopt">
}

socket: fun(domain, type, protocol) {
  <primitive "net_socket">
}

bind: fun(sockfd, addrinfo) {
  <primitive "net_bind">
}
connect: fun(sockfd, addr) {
  <primitive "net_connect">
}
listen: fun(sockfd, backlog) {
  <primitive "net_listen">
}

accept: fun(sockfd) {
  <primitive "net_accept">
}
recv: fun(sockfd, len, flags) {
  <primitive "net_recv">
}
readline: fun(sockfd) {
  var buf = "";
  while (true) {
    var c = recv(sockfd, 1, 0);
    if (c.size == 0) {
      return buf;
    }
    if (c == "\r") {
      recv(sockfd, 1, 0); //chop off \n
      return buf;
    } else {
      buf += c;
    }
  }
}
writeline: fun(sockfd, line) {
  send(sockfd, line + "\r\n", 0);
}
send: fun(sockfd, buf, flags) {
  <primitive "net_send">
}

close: fun(sockfd) {
  <primitive "net_close">
}

class AddrInfo
fields: self;
init new: fun(struct) {
  @self = struct;
}
instance_method ai_family: fun() {
  <primitive "net_addrinfo_ai_family">
}
instance_method ai_socktype: fun() {
  <primitive "net_addrinfo_ai_socktype">
}
instance_method ai_protocol: fun() {
  <primitive "net_addrinfo_ai_protocol">
}
instance_method ai_addr: fun() {
  <primitive "net_addrinfo_ai_addr">
}
// instance_method ai_addrlen: fun() {
//   <primitive "net_addrinfo_ai_addrlen">
// }
end

class SockAddr
fields: addr, len;
init new: fun(addr, len) {
  @addr = addr;
  @len = len;
}
instance_method len: fun() {
  return @len;
}
end
