meme central:memescript/0.0.3/compiler

@author: Lincoln Clarete <lincoln@clarete.li>;
@license: MIT;

requires io, net
where
  io = central:linux/0.0.1/io
  net = central:linux/0.0.1/net
end

get_server_socket: fun() {
  var saddrs = net.getaddrinfo(null, "8000", {:ai_family: net.AF_UNSPEC,
                                              :ai_sockettype: net.SOCK_STREAM});
  var fd = saddrs.first_success(net.NetworkError, fun(addr) {
    var fd = net.socket(addr.ai_family, addr.ai_socktype, addr.ai_protocol);
    net.setsockopt(fd, net.SOL_SOCKET, net.SO_REUSEADDR, net.SO_DEBUG);
    net.bind(fd, addr);
    net.listen(fd, 1);
    ^ fd;
  });
}


get_client_socket: fun() {
  var saddrs = net.getaddrinfo(null, "8000", {:ai_family: net.AF_UNSPEC,
                                              :ai_sockettype: net.SOCK_STREAM});

  var fd = saddrs.first_success(net.NetworkError, fun(addr) {
    var fd = net.socket(addr.ai_family, addr.ai_socktype, addr.ai_protocol);
    net.setsockopt(fd, net.SOL_SOCKET, net.SO_REUSEADDR, net.SO_DEBUG);
    net.connect(fd, addr.ai_addr);
    ^ fd;
  });
}

server_session_loop: fun(client_fd) {
  while (true) {
    var line = net.readline(client_fd);
    io.print("server: read line: " + line.toSource);
    if (line == "exit") {
      net.send(client_fd, "bye mate!\r\n", 0);
      net.close(client_fd);
      return null;
    } elif (line.size == 0) {
      net.close(client_fd);
      return null;
    } else {
      net.send(client_fd, "ok mate!\r\n", 0);
    }
  }
}
server_main_loop: fun() {
  var fd = get_server_socket();
  while (true) {
    io.print("waiting for a client to connect...");
    var cfd = net.accept(fd);
    io.print("client connected! socket: " + cfd.toString);
    io.print(cfd);
    var client_fd = cfd[0];
    if (client_fd == -1) {
      Exception.throw("accept failed");
    }
    server_session_loop(client_fd);
  }
  //net.close(fd);
}


client_main_loop: fun() {
  var fd = get_client_socket();
  var i = 0;
  var res = net.send(fd, "hello\r\n", 0);
  res = net.readline(fd);
  io.print("received from server: " + res);
  net.close(fd);
  return null;
}
main: fun() {
  if (argv()[1] == "server") {
    server_main_loop();
  } else {
    client_main_loop();
  }
}
