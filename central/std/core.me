meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

object Behavior
  _vt: Behavior; //self-referencing
  _delegate: null;
  dict: {};
//  size: 0;
end

object Object_CompiledClass
  _vt: CompiledClass; //declared below
  _delegate: null;
  name: "Object";
  super_class_name: "";
  compiled_module: CoreCompiledModule;
  fields: [];
  methods: {};
  own_methods: {};
end

object Object_Behavior
  _vt: Behavior;
  _delegate: null;
  size: 0;
  functions {
    init new: fun() {
      return this;
    }
    // id: fun() {
    //   <primitive "id">
    // }
    toString: fun() {
      <primitive "behavior_to_string">
    }
    toSource: fun() {
      <primitive "behavior_to_source">
    }
    ==: fun(other) {
      <primitive "equal">
    }
    !=: fun(other) {
      return !(this == other);
    }
    fullName: fun() {
      return "core:Behavior";
    }
  }
end

object Object
  _vt: Object_Behavior;
  _delegate: null;
  size: 0;
  compiled_class: Object_CompiledClass;
  functions {
    // id: fun() {
    //   <primitive "id">
    // }
    toString: fun() {
      <primitive "object_to_string">
    }
    toSource: fun() {
      <primitive "object_to_source">
    }
    !: fun() {
      <primitive "object_not">
    }
    ==: fun(other) {
      <primitive "equal">
    }
    !=: fun(other) {
      return !(this == other);
    }
    send: fun(name, args) {
      <primitive "object_send">
    }
    super_send: fun(name, args) {
      <primitive "object_super_send">
    }
    id: fun() {
      <primitive "object_id">
    }
    fullName: fun() {
      return "core:Object";
    }
    or: fun(other) {
      if (this) {
        return this;
      } elif (other) {
        return other;
      } else {
        return false;
      }
    }
  }
end

class CompiledClass
fields: name, super_class_name, compiled_module,
        fields, methods, own_methods;
instance_method name: fun() {
  return @name;
}
instance_method super_class_name: fun() {
  return @super_class_name;
}
instance_method compiled_module: fun() {
  return @compiled_module;
}
instance_method fields: fun() {
  return @fields;
}
instance_method methods: fun() {
  return @methods;
}
instance_method own_methods: fun() {
  return @own_methods;
}
instance_method fullName: fun() {
  if (@compiled_module) {
    return @compiled_module.fullName() + ":" + @name;
  } else {
    //TODO: actually get thisModule.compiledModile or something
    return "core:" + @name;
  }
}
instance_method path: fun() {
  return @compiled_module.path() + "#" + @name;
}
end

class CompiledFunction
fields: header, name, params, prim_name, accessor_flags,
      accessor_field, owner, outer_cfun, lit_frame_size,
      literal_frame_addr, bytecode_size, bytecode_addr,
      exception_frames_len, exception_frame_addr,
      env_table, text, line_mappings, loc_mappings,
      closures;
init withEnv: fun(text, scope_names, cmod) {
  <primitive "compiled_function_with_env">
}
init withFrame: fun(text, frame, cmod) {
  <primitive "compiled_function_with_frame">
}
instance_method is_prim: fun() {
  return (@header & 0x2) >> 1;
}
instance_method new_context: fun(fp, module) {
  <primitive "compiled_function_new_context">
  //return Context.new(this, fp, module);
}
instance_method asContextWithVars: fun(imod, vars_dict) {
  <primitive "compiled_function_as_context_with_vars">
}
instance_method text: fun() {
  <primitive "compiled_function_get_text">
}
// instance_method line_mapping: fun() {
//   <primitive "compiled_function_get_line_mapping">
// }
// instance_method loc_mapping: fun() {
//   <primitive "compiled_function_get_loc_mapping">
// }
instance_method source_location_for: fun(frame) {
  <primitive "compiled_function_loc_for">
}
instance_method lineFor: fun(frame) {
  if (this.is_prim) {
    return 0;
  } else {
    return this.source_location_for(frame)[0];
  }
}
instance_method name: fun() {
  return @name;
}
instance_method owner: fun() {
  return @owner;
}
instance_method path: fun() {
  <primitive "compiled_function_path">
  // if (Mirror.vtFor(@owner) == CompiledModule) {
  //   return @owner.path + "#" + @name;
  // } elif (Mirror.vtFor(@owner) == CompiledClass) {
  //   return @owner.path + "/" + @name;
  // } else {
  //   Exception.throw("CompiledFunction.owner should be either an instance of CompiledClass or CompiledModule");
  // }
}
instance_method fullName: fun() {
  return @owner.fullName + "/" + @name;
}
instance_method isTopLevel: fun() {
  return (@header & 0x10) >> 4;
}
instance_method outerCompiledFunction: fun() {
  return @outer_cfun;
}
instance_method env_table: fun() {
  return @env_table;
}
instance_method bytecode_addr: fun() {
  return @bytecode_addr;
}
instance_method line_mappings: fun() {
  return @line_mappings;
}
instance_method closures: fun() {
  return @closures;
}
instance_method recompile: fun(line, text) {
  <primitive "compiled_function_recompile">
}
end

//vm: CompiledModule.mec_image (MECImage::load)
class CompiledModule
fields: name, license, params, default_params, aliases, functions, classes,
      parent_module, mec_image;
instance_method fullName: fun() {
  return @name;
}
instance_method path: fun() {
  <primitive "compiled_module_path">
}
instance_method functions: fun() {
  return @functions;
}
instance_method classes: fun() {
  return @classes;
}
end

class Null
instance_method toString: fun() {
  return "null";
}
instance_method toSource: fun() {
  return "null";
}
end

class Boolean
instance_method and: fun(other) {
  if (this) {
    if (other) {
      return true;
    }
  }
  return false;
}
instance_method or: fun(other) {
  if (this) {
    return this;
  } elif (other) {
    return other;
  }
  return false;
}
instance_method toString: fun() {
  if (this) {
    return "true";
  } else {
    return "false";
  }
}
instance_method toSource: fun() {
  return this.toString;
}
end

//VM: String.cstr (MECImage::instantiate_class)
class String
instance_method toInteger: fun() {
  <primitive "string_to_integer">
}
instance_method toString: fun() {
  return this;
}
instance_method toSource: fun() {
  return "\"" + this.replace_all("\\", "\\\\").replace_all("\"", "\\\"").replace_all("\n", "\\n") + "\"";
}
instance_method toSymbol: fun() {
  <primitive "string_to_symbol">
}
instance_method toByte: fun() {
  <primitive "string_to_byte">
}
instance_method asHex: fun() {
  <primitive "string_as_hex">
}
instance_method +: fun(other) {
  <primitive "string_concat">
}
instance_method <: fun(other) {
  <primitive "string_lt">
}
instance_method times: fun(s) {
  <primitive "string_times">
}
instance_method count: fun(other) {
  <primitive "string_count">
}
instance_method size: fun() {
  <primitive "string_size">
}
instance_method ==: fun(other) {
  <primitive "string_equal">
}
instance_method find: fun(arg) {
  <primitive "string_find">
}
instance_method each: fun(fn) {
  <primitive "string_each">
}
instance_method map: fun(fn) {
  <primitive "string_map">
}
instance_method index: fun(arg) {
  <primitive "string_index">
}
instance_method rindex: fun(arg) {
  <primitive "string_rindex">
}
instance_method rindex_from: fun(arg, pos) {
  <primitive "string_rindex_from">
}
instance_method from: fun(idx) {
  <primitive "string_from">
}
instance_method substr: fun(from, max) {
  <primitive "string_substr">
}
instance_method b64encode: fun() {
  <primitive "string_b64encode">
}
instance_method b64decode: fun() {
  <primitive "string_b64decode">
}
instance_method replace_all: fun(what, value) {
  <primitive "string_replace_all">
}
instance_method onlySpaces: fun() {
  <primitive "string_only_spaces">
}
instance_method onlyDigits: fun() {
  <primitive "string_only_digits">
}
instance_method isLower: fun() {
  <primitive "string_is_lower">
}
instance_method isUpper: fun() {
  <primitive "string_is_upper">
}
instance_method split: fun(sep) {
  <primitive "string_split">
}
instance_method trim: fun() {
  <primitive "string_trim">
}
instance_method unescape: fun() {
  <primitive "string_unescape">
}
end

//vm: Symbol.new() (VM::start -> VM::new_symbol)
class Symbol
instance_method toString: fun() {
  <primitive "symbol_to_string">
}
instance_method toSource: fun() {
  return ":" + this.toString;
}
end

class Dictionary
fields: flag, self;
init new: fun() {
  <primitive "dictionary_new">
}
instance_method toString: fun() {
  <primitive "dictionary_to_string">
}
instance_method toSource: fun() {
  <primitive "dictionary_to_source">
}
instance_method set: fun(key, value) {
  <primitive "dictionary_set">
}
instance_method index: fun(idx) {
  <primitive "dictionary_index">
}
instance_method +: fun(other) {
  <primitive "dictionary_plus">
}
instance_method copy: fun() {
  <primitive "dictionary_copy">
}
instance_method has: fun(key) {
  <primitive "dictionary_has">
}
instance_method keys: fun() {
  <primitive "dictionary_keys">
}
instance_method values: fun() {
  <primitive "dictionary_values">
}
instance_method each: fun(fn) {
  <primitive "dictionary_each">
}
instance_method size: fun() {
  <primitive "dictionary_size">
}
instance_method ==: fun(other) {
  <primitive "dictionary_equals">
}
instance_method delete: fun(key) {
  <primitive "dictionary_delete">
}
end

//vm: List.new (VM::start)
class List
fields: flag, vector;
init new: fun() {
  <primitive "list_new">
}
init new_from_stack: fun(*args) {
  <primitive "list_new_from_stack">
}
instance_method append: fun(x) {
  <primitive "list_append">
}
instance_method prepend: fun(x) {
  <primitive "list_prepend">
}
instance_method extend: fun(lst) {
  <primitive "list_extend">
}
instance_method insert: fun(idx, x) {
  <primitive "list_insert">
}
instance_method extends: fun(other) {
  other.each(fun(_, x) { this.append(x) });
}
instance_method index: fun(idx) {
  <primitive "list_index">
}
instance_method set: fun(idx, val) {
  <primitive "list_set">
}
instance_method pos: fun(val) {
  <primitive "list_pos">
}
instance_method each: fun(fn) {
  <primitive "list_each">
}
instance_method map: fun(fn) {
  <primitive "list_map">
}
instance_method sum: fun() {
  <primitive "list_sum">
}
instance_method sorted: fun() {
  <primitive "list_sorted">
}
instance_method filter: fun(fn) {
  <primitive "list_filter">
}
instance_method detect: fun(fn) {
  <primitive "list_detect">
}
instance_method reduce: fun(initial, fn) {
  <primitive "list_reduce">
}
instance_method unique: fun() {
  <primitive "list_unique">
}
instance_method has: fun(value) {
  <primitive "list_has">
}
instance_method last: fun() {
  <primitive "list_last">
}
instance_method from: fun(idx) {
  <primitive "list_from">
}
instance_method range: fun(begin, _end) {
  <primitive "list_range">
}
instance_method toString: fun() {
  <primitive "list_to_string">
}
instance_method toSource: fun() {
  <primitive "list_to_source">
}
instance_method size: fun() {
  <primitive "list_size">
}
instance_method reverse: fun() {
  <primitive "list_reverse">
}
instance_method join: fun(sep) {
  <primitive "list_join">
}
instance_method +: fun(other) {
  <primitive "list_plus">
}
instance_method times: fun(x) {
  <primitive "list_times">
}
instance_method ==: fun(other) {
  <primitive "list_equals">
}
instance_method ordered_by: fun(fn) {
  <primitive "list_ordered_by">
}
instance_method any: fun(fn) {
  <primitive "list_any">
}
instance_method replace: fun(begin, _end, lst) {
  <primitive "list_replace">
}
instance_method first_success: fun(exc, fn) {
  <primitive "list_first_success">
}
end

class LongNum
fields: self;
instance_method +: fun(arg) {
  <primitive "numeric_sum">
}
instance_method -: fun(arg) {
  <primitive "numeric_sub">
}
instance_method *: fun(arg) {
  <primitive "numeric_mul">
}
instance_method /: fun(arg) {
  <primitive "numeric_div">
}
instance_method <: fun(arg) {
  <primitive "numeric_lt">
}
instance_method >: fun(arg) {
  <primitive "numeric_gt">
}
instance_method >=: fun(arg) {
  <primitive "numeric_gteq">
}
instance_method <=: fun(arg) {
  <primitive "numeric_lteq">
}
instance_method ==: fun(arg) {
  <primitive "numeric_eq">
}
instance_method >>: fun(arg) {
  <primitive "numeric_rshift">
}
instance_method <<: fun(arg) {
  <primitive "numeric_lshift">
}
instance_method &: fun(arg) {
  <primitive "numeric_bit_and">
}
instance_method |: fun(arg) {
  <primitive "numeric_bit_or">
}
instance_method neg: fun() {
  <primitive "numeric_neg">
}
instance_method toString: fun() {
  <primitive "numeric_to_string">
}
instance_method asChar: fun() {
  <primitive "numeric_as_char">
}
instance_method toSource: fun() {
  <primitive "numeric_to_source">
}
end

class Integer
instance_method +: fun(arg) {
  <primitive "numeric_sum">
}
instance_method -: fun(arg) {
  <primitive "numeric_sub">
}
instance_method *: fun(arg) {
  <primitive "numeric_mul">
}
instance_method /: fun(arg) {
  <primitive "numeric_div">
}
instance_method <: fun(arg) {
  <primitive "numeric_lt">
}
instance_method >: fun(arg) {
  <primitive "numeric_gt">
}
instance_method >=: fun(arg) {
  <primitive "numeric_gteq">
}
instance_method <=: fun(arg) {
  <primitive "numeric_lteq">
}
instance_method ==: fun(arg) {
  <primitive "numeric_eq">
}
instance_method >>: fun(arg) {
  <primitive "numeric_rshift">
}
instance_method <<: fun(arg) {
  <primitive "numeric_lshift">
}
instance_method &: fun(arg) {
  <primitive "numeric_bit_and">
}
instance_method |: fun(arg) {
  <primitive "numeric_bit_or">
}
instance_method neg: fun() {
  <primitive "numeric_neg">
}
instance_method toString: fun() {
  <primitive "numeric_to_string">
}
instance_method asChar: fun() {
  <primitive "numeric_as_char">
}
instance_method toSource: fun() {
  <primitive "numeric_to_source">
}
end

class Float
fields: self;
instance_method ceil: fun() {
  <primitive "float_ceil">
}
end

class Function
fields: compiled_function, module;
instance_method compiledFunction: fun() {
  return @compiled_function;
}
instance_method getEnv: fun() {
  <primitive "function_get_env">
}
end

class Context
fields: compiled_function, module, env;
init new: fun(cfun, env, module) {
  <primitive "context_new">
  // @compiled_function = cfun;
  // @module = module;
  // @env = env;
}
instance_method compiledFunction: fun() {
  return @compiled_function;
}
instance_method getEnv: fun() {
  <primitive "context_get_env">
}
class_method withVars: fun(code, vars, imod) {
  var cmod = get_compiled_module(imod);
  var cfn = CompiledFunction.withEnv(code, vars.keys(), cmod);
  return cfn.asContextWithVars(imod, vars);
}
class_method withFrame: fun(code, frame, imod) {
  <primitive "context_with_frame">
  // var cmod = get_compiled_module(imod);
  // var cfn = CompiledFunction.withFrame(code, frame, cmod);
  // return cfn.new_context(frame.fp, imod);
}
end

class Exception
fields: message, stack_trace;
init new: fun(message) {
  <primitive "exception_constructor">
}
instance_method message: fun() {
  return @message;
}
instance_method stack_trace: fun() {
  return @stack_trace;
}
instance_method throw: fun() {
  <primitive "exception_throw">
}
instance_method toString: fun() {
  return "Exception: " + this.message.toString();
}
class_method throw: fun(msg) {
  return this.new(msg).throw;
}
end

class NonLocalReturn
fields: value;
init new: fun(value) {
  @value = value;
}
instance_method throw: fun() {
  <primitive "exception_throw">
}
instance_method value: fun() {
  return @value;
}
class_method throw: fun(value) {
  this.new(value).throw;
}
end

class ImportError < Exception
instance_method toString: fun() {
  return "ImportError: " + this.message.toString();
}
end

class TypeError < Exception
instance_method toString: fun() {
  return "TypeError: " + this.message.toString();
}
end

class Overflow < Exception
instance_method toString: fun() {
  return "OverFlow: " + this.message.toString();
}
end

class IndexError < Exception
instance_method toString: fun() {
  return "IndexError: " + this.message.toString();
}
end

class KeyError < Exception
instance_method toString: fun() {
  return "KeyError: " + this.message.toString();
}
end

class InternalError < Exception
instance_method toString: fun() {
  return "InternalError: " + this.message.toString();
}
end


class DoesNotUnderstand < Exception
instance_method toString: fun() {
  return "DoesNotUnderstand: " + this.message.toString();
}
end

class ArityError < Exception
instance_method toString: fun() {
  return "ArityError: " + this.message.toString();
}
end

// temps
class Process
fields: self;
instance_method stepInto: fun() {
  <primitive "process_step_into">
}
instance_method stepOver: fun() {
  <primitive "process_step_over">
}
instance_method stepOverLine: fun() {
  <primitive "process_step_over_line">
}
instance_method stepOut: fun() {
  <primitive "process_step_out">
}
instance_method resume: fun() {
  <primitive "process_resume">
}
instance_method reloadFrame: fun() {
  <primitive "process_reload_frame">
}
instance_method returnFromFrame: fun(val) {
  <primitive "process_return_from_frame">
}
instance_method breakAtAddr: fun(fn) {
  <primitive "process_break_at_addr">
}
instance_method rewindAndContinue: fun(frame) {
  <primitive "process_rewind_and_continue">
}
instance_method runUntil: fun(cfun, line) {
  <primitive "process_run_until">
}
instance_method add_breakpoint: fun(cfun, line) {
  <primitive "process_add_breakpoint">
}
instance_method currentException: fun() {
  <primitive "process_current_exception">
}
instance_method lastReturnedValue: fun() {
  <primitive "process_last_returned_value">
}
instance_method toggle_module_break_mode: fun() {
  <primitive "process_toggle_module_break_mode">
}
instance_method fp: fun() {
  <primitive "process_fp">
}
instance_method cp: fun() {
  <primitive "process_cp">
}
instance_method mp: fun() {
  <primitive "process_mp">
}
// instance_method ip: fun() {
//   <primitive "process_ip">
// }
instance_method frames: fun() {
  <primitive "process_frames">
}
instance_method detach_debugger: fun() {
  <primitive "process_detach_debugger">
}
// instance_method apply: fun(fn) {
//   <primitive "process_apply">
// }
// instance_method evalInFrame: fun(text, frame_idx) {
//   <primitive "process_eval_in_frame">
// }
end

class Frame
fields: self;
instance_method cp: fun() {
  <primitive "frame_cp">
}
instance_method ip: fun() {
  <primitive "frame_ip">
}
instance_method fp: fun() {
  <primitive "frame_fp">
}
instance_method rp: fun() {
  <primitive "frame_rp">
}
instance_method dp: fun() {
  <primitive "frame_dp">
}
instance_method get_local_value: fun(idx) {
  <primitive "frame_get_local_value">
}
end
