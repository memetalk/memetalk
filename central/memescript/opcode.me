meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

requires io, mirror
where
  io = central:linux/0.0.1/io
  mirror = central:reflection/0.0.1/mirror
  import Mirror from mirror
end

WORD_SIZE: 4;

opcode_mapping: {
    // push
    // :push_param: 1,
    :push_local: 2,
    :push_literal: 3,
    :push_field: 4,

    :push_this: 6,
    :push_module: 7,

    :push_bin: 8, // true:1/false:2/null: 0
    :push_fp: 9,

    :push_context: 10,

    // pop
    // :pop_param: 20,
    :pop_local: 21,
    :pop_field: 22,
    :pop: 24,
    // ret
    :ret_this:  30,
    :ret_top:  31,
    // :ret_bin:  32,
    // :ret_param:  33,
    // :ret_local:  34,
    // :ret_field:  35,
    // calls
    :send:  40,
    :call:  41,
    :super_send:  42,
    :super_ctor_send:  43,
    //
    // jumps
    :jz: 50,
    :jmp: 51,
    :jmpb: 52,
    // ...
    :exit: 60
};


encode: fun(op, arg) {
  return (op << 24) + arg;
}

decode: fun(word) {
 return [((0xFF000000 & word) >> 24), (0xFFFFFF & word)];
}

class Label
fields: bytecodes, start, pos;
init new: fun(bytecodes, pos) { //pos defaults to null
  @bytecodes = bytecodes;
  @start = bytecodes.size;
  @pos = pos;
}
instance_method as_current: fun() {
  @pos = @bytecodes.size - @start;
}
instance_method value: fun() {
  return @pos;
}
end

class Bytecodes
fields: lst;
init new: fun() {
  @lst = [];
}
instance_method append: fun(name, arg) {
  @lst.append(Bytecode.new(name, Value.new(arg)));
}
instance_method words: fun() {
  return @lst.map(fun(x) { x.value });
}
instance_method size: fun() {
  return @lst.size;
}
instance_method list: fun() {
  return @lst;
}
instance_method new_label: fun(current) { //current defaults to null
  if (current) {
    return Label.new(this, @lst.size);
  } else {
    return Label.new(this, null);
  }
}
end

class Value
fields: val;
init new: fun(val) {
  @val = val;
}
instance_method value: fun() {
  if (Mirror.vtFor(@val) == Integer) {
    return @val;
  } elif (Mirror.vtFor(@val) == Context) {
    return @val();
  } elif (Mirror.vtFor(@val) == Label) {
    return @val.value;
  } else {
    Exception.throw("Unsupported type");
  }
}
end

class Bytecode
fields: name, arg;
init new: fun(name, arg) {
  @name = name;
  @arg = arg;
}
instance_method value: fun() {
  opcode_mapping.each(fun(key, val) {
    if (key == @name) {
      ^ encode(val, @arg.value);
    }
  });
  Exception.throw("Opcode not found: " + @name.toSource);
}
instance_method set_arg: fun(arg) {
  @arg = arg;
}
end
