meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

requires vmemory, mec, bits, mirror
where
  vmemory  = central:memescript/0.0.3/vmemory
  mec      = central:memescript/0.0.3/mec
  bits     = central:memescript/0.0.3/bits
  mirror = central:reflection/0.0.1/mirror
  import VirtualMemory from vmemory
  import Mirror from mirror
end

class CompVirtualMemory < VirtualMemory
fields: ext_ref_table, symb_table, string_table;
init new: fun() {
  super.new();
  @ext_ref_table = [];
  @symb_table = {};
  @string_table = {};
}
instance_method symbol_table: fun() {
  return @symb_table;
}
instance_method ext_ref_table: fun() {
  return @ext_ref_table;
}
instance_method external_references: fun() {
  return @ext_ref_table.map(fun(x) {
    [x[0], this.physical_address(x[1])]
  });
}
instance_method external_names: fun() {
  return (@ext_ref_table.map(fun(x) { x[0] }) + @symb_table.values).unique.sorted;
}
instance_method reloc_table: fun() {
  return this.cells.filter(fun(entry) { Mirror.vtFor(entry) == vmemory.PointerCell}).map(fun(entry) { this.physical_address(entry) });
}
instance_method append_external_ref: fun(name, label) { //label defaults to null
  var oop = this.append_int(0xAAAA, label);
  @ext_ref_table.append([name, oop]);
  return oop;
}
instance_method append_object_instance: fun() {
  this.append_int(mec.FRAME_TYPE_OBJECT, null);
  this.append_int(2 * bits.WSIZE, null);

  var oop = this.append_external_ref("Object", null); //vt
  this.append_null(null);                             //delegate: end of chain of delegation
  return oop;
}
instance_method append_symbol_instance: fun(string) {
  this.append_int(mec.FRAME_TYPE_OBJECT, null);
  this.append_int(1 * bits.WSIZE, null);
  if (string == "") {
    return this.append_null(null);
  }
  var oop = this.append_int(0xBBBB, null);
  @symb_table[oop] = string;
  return oop;
}
instance_method append_string_instance: fun(string) {
  if (@string_table.has(string)) {
    return @string_table[string];
  } else {
    var delegate = this.append_object_instance();

    this.append_int(mec.FRAME_TYPE_BVAR_OBJECT, null);
    this.append_int((3 * bits.WSIZE) + bits.string_block_size(string + "\0"), null);

   var oop = this.append_external_ref("String", null);
   this.append_pointer_to(delegate, null);
   this.append_int(string.size, null);
   this.append_string(string, null);

   @string_table[string] = oop;
   return oop;
  }
}
instance_method append_sym_to_string_dict: fun(mdict) {
  var pairs_oop = [];
  var keys = mdict.keys.sorted;
  for (var i = 0; i < keys.size; i += 1) {
    var key = keys[i];
    var val = mdict[key];
    var key_oop = this.append_string_instance(key);
    var val_oop = this.append_symbol_instance(val);
    pairs_oop.append([key_oop, val_oop]);
  }
  return pairs_oop.append_dict_with_pairs(pairs_oop);
}
instance_method append_dict_prologue: fun(size, frame_oop) {
  var delegate = this.append_object_instance();

  this.append_int(mec.FRAME_TYPE_DVAR_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("Dictionary", null); //vt
  this.append_pointer_to(delegate, null);                 //delegate
  this.append_int(size, null);                            //dict length
  if (frame_oop == null) {
    this.append_null(null);
  } else {
    this.append_pointer_to(frame_oop, null);
  }
  return oop;
}
instance_method append_empty_list: fun() {
  var delegate = this.append_object_instance();

  this.append_int(mec.FRAME_TYPE_LIST_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("List", null); //vt
  this.append_pointer_to(delegate, null);           //delegate
  this.append_int(0, null);                         //len
  this.append_null(null);                           //frame
  return oop;
}
instance_method append_list_of_strings: fun(lst){
  var oops_elements = lst.map(fun(string) { this.append_string_instance(string) });
  var delegate = this.append_object_instance();

  if (lst.size > 0) {
    this.append_int(mec.FRAME_TYPE_ELEMENTS, null);
    this.append_int(lst.size * bits.WSIZE, null);
    var oops = [];
    for (var i = 0; i < oops_elements.size; i += 1) {
      oops.append(this.append_pointer_to(oops_elements[i], null));
    }
  }

  this.append_int(mec.FRAME_TYPE_LIST_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("List", null); //vt
  this.append_pointer_to(delegate, null);           //delegate
  this.append_int(lst.size, null);                  //len
  if (lst.size > 0) {
    this.append_pointer_to(oops[0], null);
  } else {
    this.append_null(null);
  }
  return oop;
}
instance_method append_list_of_symbols: fun(lst) {
  var oops_elements = lst.map(fun(string) { this.append_symbol_instance(string) });
  var delegate = this.append_object_instance();

  if (lst.size > 0) {
    this.append_int(mec.FRAME_TYPE_ELEMENTS, null);
    this.append_int(lst.size * bits.WSIZE, null);
    var oops = [];
    for (var i = 0; i < oops_elements.size; i += 1) {
      oops.append(this.append_pointer_to(oops_elements[i], null));
    }
  }

  this.append_int(mec.FRAME_TYPE_LIST_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("List", null); //vt
  this.append_pointer_to(delegate, null);           //delegate
  this.append_int(lst.size, null);                  //len
  if (lst.size > 0) {
    this.append_pointer_to(oops[0], null);
  } else {
    this.append_null(null);
  }
  return oop;
}

// used internally to create class fields list, etc.
instance_method append_list_of_ints: fun(lst) {
  var delegate = this.append_object_instance();

  if (lst.size > 0) {
    this.append_int(mec.FRAME_TYPE_ELEMENTS, null);
    this.append_int(lst.size * bits.WSIZE, null);
    var oops = [];
    for (var i = 0; i < lst.size; i += 1) {
      oops.append(this.append_tagged_int(lst[i], null));
    }
  }

  this.append_int(mec.FRAME_TYPE_LIST_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("List", null); //vt
  this.append_pointer_to(delegate, null);           //delegate
  this.append_int(lst.size, null);                  //len
  if (lst.size > 0) {
    this.append_pointer_to(oops[0], null);
  } else {
    this.append_null(null);
  }
  return oop;
}
instance_method append_list_of_oops_for_labels: fun(lst) {
  var delegate = this.append_object_instance();

  if (lst.size > 0) {
    this.append_int(mec.FRAME_TYPE_ELEMENTS, null);
    this.append_int(lst.size * bits.WSIZE, null);
    var oops = [];
    for (var i = 0; i < lst.size; i += 1) {
      oops.append(this.append_label_ref(lst[i], null));
    }
  }

  this.append_int(mec.FRAME_TYPE_LIST_OBJECT, null);
  this.append_int(4 * bits.WSIZE, null);

  var oop = this.append_external_ref("List", null); //vt
  this.append_pointer_to(delegate, null);           //delegate
  this.append_int(lst.size, null);                  //len
  if (lst.size > 0) {
    this.append_pointer_to(oops[0], null);
  } else {
    this.append_null(null);
  }
  return oop;
}
end
