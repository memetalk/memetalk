meme central:memescript/0.0.3/compiler

@author: Thiago Silva <thiago@memetalk.org>;
@license: MIT;

requires ext, bits, comp_vmemory, core_vmemory, io, entries, ometa_base, meme, meme_tr
where
  bits         = central:memescript/0.0.3/bits
  comp_vmemory = central:memescript/0.0.3/comp_vmemory
  core_vmemory = central:memescript/0.0.3/core_vmemory
  entries      = central:memescript/0.0.3/entries
  meme         = central:memescript/0.0.3/meme
  meme_tr      = central:memescript/0.0.3/meme_tr
  ext          = central:std/0.0.3/ext
  io           = central:linux/0.0.1/io
  ometa_base   = central:ometa/0.0.2/ometa_base
  import OMetaException from ometa_base
end


MAGIC_NUMBER: 0x420;

name_ptr_for: fun(name, struct, header_size) {
  var acc = 0;
  var names = struct[:names];
  for (var i = 0; i < names.size; i += 1) {
    var pair = names[i];
    var entry_name_t = pair[0];
    var bsize = pair[1];
    if (entry_name_t == name + "\0") {
      return header_size + struct[:header][:ot_size] + acc;
    }
    acc = acc + bsize;
  }
  Exception.throw("entry " + name.toString + " not found in NAMES");
}


class MEC
fields: cmodule;
init new: fun(cmodule) {
  @cmodule = cmodule;
}
instance_method create_mec_struct: fun() {
  var mec = {:header: {:magic_number: null,
                      :ot_size: null,
                      :er_size: null,
                      :st_size: null,
                      :names_size: null},
             :object_table: [],        //the loaded objects of this module
             :names: [],
             :external_references: [], //references to core objects
             :symbol_table: [],        //Symbol objects needed
             :reloc_table: []          //addresses within the OT that need relocation on load
    };

  var header_size = mec[:header].size * bits.WSIZE;
  // var base = header_size + mec[:header][:names_size];
  var vmem = comp_vmemory.CompVirtualMemory.new();
  vmem.set_base(header_size);
  ext.bench("cmodule.fill", fun() { @cmodule.fill(vmem); });

  mec[:header][:magic_number] = MAGIC_NUMBER;

  var names_list = vmem.external_names.map(fun(n) { n + "\0" }).unique;

  mec[:object_table] = vmem.object_table();
  mec[:header][:ot_size] = mec[:object_table].size;

  mec[:names] = names_list.map(fun(name_t) { [name_t, bits.string_block_size(name_t)] });
  mec[:header][:names_size] = mec[:names].map(fun(x) { x[1] }).sum;

  var ext_refs = vmem.external_references();
  for (var i = 0; i < ext_refs.size; i += 1) {
    var pair = ext_refs[i];
    mec[:external_references].append(name_ptr_for(pair[0], mec, header_size));
    mec[:external_references].append(pair[1]);
  }

  mec[:header][:er_size] = mec[:external_references].size * bits.WSIZE;

  var sref = vmem.symbols_references;
  for (i = 0; i < sref.size; i += 1) {
   var p2 = sref[i];
    mec[:symbol_table].append(name_ptr_for(p2[0], mec, header_size));
    mec[:symbol_table].append(p2[1]);
  }

  mec[:header][:st_size] = mec[:symbol_table].size * bits.WSIZE;

  mec[:reloc_table] = vmem.reloc_table();

  return mec;
}
instance_method dump: fun(filepath) {
  var mec = this.create_mec_struct();

  io.with_file(filepath.substr(0, filepath.size - 2) + "mec", fun(write) {
    //header
    write(bits.pack(mec[:header][:magic_number]));
    write(bits.pack(mec[:header][:ot_size]));
    write(bits.pack(mec[:header][:er_size]));
    write(bits.pack(mec[:header][:st_size]));
    write(bits.pack(mec[:header][:names_size]));

    //object table
    var objt = mec[:object_table];
    for (var i = 0; i < objt.size; i += 1) {
      write(bits.pack_byte(objt[i]));
    }

    //names
    var names = mec[:names];
    for (i = 0; i < names.size; i += 1) {
      var entry = names[i];
      var name = entry[0];
      var chunk_size = entry[1];
      var text = name + "\0".times(chunk_size - name.size);
      write(text);
    }

    //external references
    var extref = mec[:external_references];
    for (i = 0; i < extref.size; i += 1) {
      write(bits.pack(extref[i]));
    }

    //symbols
    var symt = mec[:symbol_table];
    for (i = 0; i < symt.size; i += 1) {
      write(bits.pack(symt[i]));
    }

    //reloc table
    var relt = mec[:reloc_table];
    for (i = 0; i < relt.size; i += 1) {
      write(bits.pack(relt[i]));
    }
  });
}
end


class BaseCompiler
fields: filepath;
init new: fun(filepath) {
  @filepath = filepath;
}
instance_method filepath: fun() {
  return @filepath;
}
instance_method parse: fun() {
  var parser = meme.MemeScriptParser.new(io.read_file(this.filepath));
  return parser.start();
  // var ast = ometa_base.parse(io.read_file(this.filepath), meme.MemeScriptParser, :start);
  // if (ast[0]) {
  //   exit(1); //FIXME: we probably want to raise as this might be used as a library
  // } else {
  //   return ast[1];
  // }
}
instance_method translate: fun(ast) {
  var input = ometa_base.OMetaStream.with_data([ast]);
  var parser = meme_tr.MemeScriptTranslator.new(this, input);
  parser.prepend_input(:start);
  try {
    parser.apply();
  } catch(OMetaException e) {
    io.print(input.format_error);
    ext.exit(1); //FIXME: we probably want to raise as this might be used as a library
  }
}
instance_method parse_and_translate: fun() {
  var ast = ext.bench("parsing", fun() {
    this.parse();
  });
  // io.print(ast);
  // io.print("translating...");
  ext.bench("translate", fun() {
    this.translate(ast);
  });
}
end

class MECCompiler < BaseCompiler
fields: cmodule;
init new: fun(filepath) {
  super.new(filepath);
  @cmodule = null;
}
instance_method new_module: fun() {
  var module_name = ext.basename(this.filepath); //provisory function to get the basename
  @cmodule = entries.CompiledModule.new(module_name);
  return @cmodule;
}
instance_method compile: fun() {
  this.parse_and_translate();

  ext.bench("mec dump", fun() {
    var mec = MEC.new(@cmodule);
    mec.dump(this.filepath);
  });
}
end

class CoreCompiler < BaseCompiler
fields: cmodule;
init new: fun(filepath) {
  super.new(filepath);
  @cmodule = entries.CoreCompiledModule.new;
}

instance_method new_module: fun() {
  return @cmodule;
}
instance_method compile: fun() {
  this.parse_and_translate();
  this.dump();
}
instance_method create_img_struct: fun() {
  var img = {
        :header: {
        :entries: null,             // number of labeled objects (top-levels, behaviors, cclasses)
        :names_size: null,          // size in bytes of NAMES section
        :st_size: null,             // size of Symbols table
        :ot_size: null},            // size of OBJECT TABLE in bytes
      :object_table: [],
      :names: [],
      :index: [],                   // index of top level entities
      :symbols: [],                 // Symbol references
      :reloc_table: []};

  var header_size = img[:header].size * bits.WSIZE; // bytes. 3 = entries, names_size, es_size, ot_size
  var vmem = core_vmemory.CoreVirtualMemory.new();
  // var base = header_size + img[:header][:names_size] + index_size;
  // vmem.set_base(base);
  vmem.set_base(header_size);
  @cmodule.fill(vmem);

  // -- HEADER and NAMES section
  var labels = @cmodule.entry_labels();
  img[:header][:entries] = labels.size;

  // names :: [(string, alloc-size in bytes, self-ptr)]

  var names_list = (labels.map(fun(l) { l + "\0"  }) + vmem.external_names.map(fun(n) { n + "\0" })).unique.sorted;

  img[:names] = names_list.map(fun(name_t) { [name_t, bits.string_block_size(name_t)] });

  img[:header][:names_size] = img[:names].map(fun(x) { x[1] }).sum;

  var index_size = img[:header][:entries] * 2 * bits.WSIZE; // *2: pair (name, entry),

  // - OBJECT TABLE
  img[:object_table] = vmem.object_table();

  // - HEADER ot_size
  img[:header][:ot_size] = img[:object_table].size;

  // symbols
  var sref = vmem.symbols_references();
  for (var i = 0; i < sref.size; i += 1) {
    var pair = sref[i];
    img[:symbols].append(name_ptr_for(pair[0], img, header_size));
    img[:symbols].append(pair[1]);
  }

  img[:header][:st_size] = img[:symbols].size * bits.WSIZE;

  // reloc
  img[:reloc_table] = vmem.reloc_table();

  // - INDEX section
  labels.each(fun(_, name) {
    img[:index].append(name_ptr_for(name, img, header_size));  // ptr to string
    img[:index].append(vmem.index_for(name));           // ptr to object
  });
  return img;
}
instance_method dump: fun() {
  var img = this.create_img_struct();

  io.with_file(this.filepath.substr(0, this.filepath.size - 2) + "img", fun(write) {
    // header

    write(bits.pack(img[:header][:entries]));
    write(bits.pack(img[:header][:names_size]));
    write(bits.pack(img[:header][:st_size]));
    write(bits.pack(img[:header][:ot_size]));

    // object table
    var core_ot = img[:object_table];
    for (var i = 0; i < core_ot.size; i += 1) {
      write(bits.pack_byte(core_ot[i]));
    }

    // names
    var names = img[:names];
    for (i = 0; i < names.size; i += 1) {
      var entry = names[i];
      var name = entry[0];
      var chunk_size = entry[1];

      var text = name + "\0".times(chunk_size - name.size);
      write(text);
    }

    // index
    var core_index = img[:index];
    for (i = 0; i < core_index.size; i += 1) {
        write(bits.pack(core_index[i]));
    }

    // symbols
    var core_symb = img[:symbols];
    for (i = 0; i < core_symb.size; i += 1) {
      write(bits.pack(core_symb[i]));
    }
    // reloc table
    var reloc_table = img[:reloc_table];
    for (i = 0; i < reloc_table.size; i += 1) {
      write(bits.pack(reloc_table[i]));
    }
  });
}
end

main: fun() {
  var args = ext.argv();
  if (args.size < 2) {
    io.print("usage: compiler <path to file.me>");
  } else {
    ext.argv().from(1).each(fun(_, fpath) {
      io.print(fpath);
      compile(fpath);
   });
  }
}

compile_core: fun(source_path) {
  CoreCompiler.new(source_path).compile();
}

compile_mec: fun(source_path) {
  MECCompiler.new(source_path).compile();
}


compile: fun(source_path) {
  if (source_path.find("core.me") >= 0) { //FIXME: be more precise.
    compile_core(source_path);
  } else {
    compile_mec(source_path);
  }
}
