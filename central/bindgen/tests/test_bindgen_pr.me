meme central:memescript/0.0.3/compiler

requires test, io, bindgen
where
  bindgen = central:bindgen/0.0.1/bindgen
  io      = central:linux/0.0.1/io
end

// :id rule
testParseIdDefinitions: fun() {
  test.assertEqual(bindgen.parseRule("foo", :id), "foo", "id");
  test.assertEqual(bindgen.parseRule("foo_test", :id), "foo_test", "id");
  test.assertEqual(bindgen.parseRule("foo234", :id), "foo234", "id");
  test.assertEqual(bindgen.parseRule("foo234a", :id), "foo234a", "id");
}
// :type
testParseTypeDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "int", :type),
    [:builtin, "int"], "type");
  test.assertEqual(bindgen.parseRule(
    "foo", :type),
    [:unknown, "foo"], "type");
}
// :typed rule
testParseTypedDefinitions: fun() {
  // Void
  test.assertEqual(bindgen.parseRule(
    "void", :typed),
    [:builtin, "void"], "typed");
  test.assertEqual(bindgen.parseRule(
    "void*", :typed),
    [:pointer, [:builtin, "void"], 1], "typed");
  // Numeric values
  test.assertEqual(bindgen.parseRule(
    "short n1", :typed), [[:builtin, "short"], "n1"], "typed");
  test.assertEqual(bindgen.parseRule(
    "short int n2", :typed), [[:builtin, "short int"], "n2"], "typed");
  test.assertEqual(bindgen.parseRule(
    "long int n3", :typed), [[:builtin, "long int"], "n3"], "typed");
  test.assertEqual(bindgen.parseRule(
    "long long int n4", :typed), [[:builtin, "long long int"], "n4"], "typed");
  test.assertEqual(bindgen.parseRule(
    "unsigned long long int n5", :typed),
    [[:unsigned, [:builtin, "long long int"]], "n5"], "typed");
  test.assertEqual(bindgen.parseRule(
    "unsigned n6", :typed),
    [[:unsigned], "n6"], "typed");
  test.assertEqual(bindgen.parseRule(
    "int *foo4", :typed),
    [[:pointer, [:builtin, "int"], 1], "foo4"], "typed");
  test.assertEqual(bindgen.parseRule(
    "int* foo5", :typed),
    [[:pointer, [:builtin, "int"], 1], "foo5"], "typed");
  test.assertEqual(bindgen.parseRule(
    "complex long double foo6", :typed),
    [[:builtin, "complex long double"], "foo6"], "typed");
  // Structs
  test.assertEqual(bindgen.parseRule(
    "struct foo1 bar1", :typed),
    [[:struct, "foo1"], "bar1"], "typed");
  test.assertEqual(bindgen.parseRule(
    "struct foo2* bar2", :typed),
    [[:pointer, [:struct, "foo2"], 1], "bar2"], "typed");
  test.assertEqual(bindgen.parseRule(
    "struct foo3 *bar3", :typed),
    [[:pointer, [:struct, "foo3"], 1], "bar3"], "typed");
  test.assertEqual(bindgen.parseRule(
    "struct foo3 *bar3", :typed),
    [[:pointer, [:struct, "foo3"], 1], "bar3"], "typed");
  // Unknown types
  test.assertEqual(bindgen.parseRule(
    "my_typedef_t *bar3", :typed),
    [[:pointer, [:unknown, "my_typedef_t"], 1], "bar3"], "typed");
  test.assertEqual(bindgen.parseRule(
    "const foo_t *bar4", :typed),
    [[:pointer, [:const, [:unknown, "foo_t"]], 1], "bar4"], "typed");
  test.assertEqual(bindgen.parseRule(
    "blah_t v", :typed),
    [[:unknown, "blah_t"], "v"], "typed");
  // Lists and pointers
  test.assertEqual(bindgen.parseRule(
    "struct wu* wu4[]", :typed),
    [[:list, [:pointer, [:struct, "wu"], 1]], "wu4"], "typed");
  // varargs
  test.assertEqual(bindgen.parseRule("...", :typed), [:varargs], "typed");
  // Annotations
  test.assertEqual(bindgen.parseRule(
    "char *foo +out", :typed),
    [[:annotations, [:pointer, [:builtin, "char"], 1], ["out"]], "foo"], "typed");
  test.assertEqual(bindgen.parseRule(
    "char *bar +null", :typed),
    [[:annotations, [:pointer, [:builtin, "char"], 1], ["null"]], "bar"], "typed");
  test.assertEqual(bindgen.parseRule(
    "char *bar +null+out", :typed),
    [[:annotations, [:pointer, [:builtin, "char"], 1], ["null", "out"]], "bar"], "typed");
  test.assertEqual(bindgen.parseRule(
    "char *bar +out+null", :typed),
    [[:annotations, [:pointer, [:builtin, "char"], 1], ["out", "null"]], "bar"], "typed");
}
// :typedef
testParseTypedefDefinitions: fun() {
  test.assertEqual(
    bindgen.parseRule("typedef int foo", :typedef),
    [:typedef, "foo", [:builtin, "int"]],
    "typedef");
  test.assertEqual(
    bindgen.parseRule("typedef char* bar", :typedef),
    [:typedef, "bar", [:pointer, [:builtin, "char"], 1]],
    "typedef");
  test.assertEqual(
    bindgen.parseRule("typedef struct st* baz", :typedef),
    [:typedef, "baz", [:pointer, [:struct, "st"], 1]],
    "typedef");
  // Function pointers
  test.assertEqual(
    bindgen.parseRule("typedef int (*foo)(int a)", :typedef),
    [:typedef, "foo", [:func-pointer, [[[:builtin, "int"], "a"]], [:builtin, "int"]]],
    "typedef");
}
// :params rule
testParseParamsDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "(int *yi)", :params),
    [[[:pointer, [:builtin, "int"], 1], "yi"]], "params");
  test.assertEqual(bindgen.parseRule(
    "(int er1, float er1)", :params),
    [[[:builtin, "int"], "er1"], [[:builtin, "float"], "er1"]], "params");
  test.assertEqual(bindgen.parseRule(
    "(float san1, struct san2 san3)", :params),
    [[[:builtin, "float"], "san1"], [[:struct, "san2"], "san3"]], "params");
  test.assertEqual(bindgen.parseRule(
    "(float si1, struct si* si3)", :params),
    [[[:builtin, "float"], "si1"], [[:pointer, [:struct, "si"], 1], "si3"]], "params");
  test.assertEqual(bindgen.parseRule(
    "(float wu1, struct wu* wu3[])", :params),
    [[[:builtin, "float"], "wu1"], [[:list, [:pointer, [:struct, "wu"], 1]], "wu3"]],
    "params");
  // Unnamed parameters
  test.assertEqual(bindgen.parseRule(
    "(int*, char*)", :params),
    [[:pointer, [:builtin, "int"], 1],
     [:pointer, [:builtin, "char"], 1]], "params");
  test.assertEqual(bindgen.parseRule(
    "(void*)", :params),
    [[:pointer, [:builtin, "void"], 1]], "params");
  test.assertEqual(bindgen.parseRule(
    "(foo_t*)", :params),
    [[:pointer, [:unknown, "foo_t"], 1]], "params");
  test.assertEqual(bindgen.parseRule(
    "(foo_t)", :params),
    [[:unknown, "foo_t"]], "params");
  test.assertEqual(bindgen.parseRule(
    "(unsigned)", :params),
    [[:unsigned]], "params");
  // No parameters
  test.assertEqual(bindgen.parseRule(
    "()", :params), [], "params");
  test.assertEqual(bindgen.parseRule(
    "(void)", :params), [], "params");
}
// :rtype rule
testParseRtypeDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "int", :rtype),
    [:builtin, "int"], "rtype");
  test.assertEqual(bindgen.parseRule(
    "char*", :rtype),
    [:pointer, [:builtin, "char"], 1], "rtype");
  test.assertEqual(bindgen.parseRule(
    "struct blah *", :rtype),
    [:pointer, [:struct, "blah"], 1], "rtype");
  test.assertEqual(bindgen.parseRule(
    "const char *", :rtype),
    [:pointer, [:const, [:builtin, "char"]], 1], "rtype");
  test.assertEqual(bindgen.parseRule(
    "unsigned char *", :rtype),
    [:pointer, [:unsigned, [:builtin, "char"]], 1], "rtype");
  // Unknown types
  test.assertEqual(bindgen.parseRule(
    "foo_t", :rtype),
    [:unknown, "foo_t"], "rtype");
}
// :func rule
testParseFuncDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "int exit(int code)", :func),
    [:func, "exit", [[[:builtin, "int"], "code"]], [:builtin, "int"]], "func");
  test.assertEqual(bindgen.parseRule(
    "struct _foo* getfoo(int bar)", :func),
    [:func, "getfoo", [[[:builtin, "int"], "bar"]], [:pointer, [:struct, "_foo"], 1]], "func");
  // Unknown types
  test.assertEqual(bindgen.parseRule(
    "foo_t f()", :func),
    [:func, "f", [], [:unknown, "foo_t"]], "func");
}
// :include rule
testParseIncludeDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "#include <blah.h>", :include),
    [:include, "<blah.h>"], "include");
  test.assertEqual(bindgen.parseRule(
    "#include \"blah.h\"", :include),
    [:include, "\"blah.h\""], "include");
}
// :struct_def
testParseStructDefDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "struct moo", :struct_def),
    [:struct, "moo"], "struct_def");
  test.assertEqual(bindgen.parseRule(
    "struct meow { int a; char* b; }", :struct_def),
    [:struct, "meow", [[[:builtin, "int"], "a"],
                       [[:pointer, [:builtin, "char"], 1], "b"]]],
     "struct_def#2");
}
// :definition
testParseDefinitionDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "//sys int test(int a)", :definition),
    [:func, "test", [[[:builtin, "int"], "a"]], [:builtin, "int"]], "definition");
  test.assertEqual(bindgen.parseRule(
    "//sys error_t test(int a)", :definition),
    [:func, "test", [[[:builtin, "int"], "a"]], [:unknown, "error_t"]], "definition");
}
// :start
testParseStartDefinitions: fun() {
  test.assertEqual(bindgen.parseRule(
    "//sys #include \"blah.h\"\n" +
    "//sys int test(int a)", :start),
    [[:include, "\"blah.h\""],
     [:func, "test", [[[:builtin, "int"], "a"]], [:builtin, "int"]]], "start");
}
// All definitions_pr grammar rules
main: fun() {
  testParseIdDefinitions();
  testParseTypeDefinitions();
  testParseTypedDefinitions();
  testParseTypedefDefinitions();
  testParseParamsDefinitions();
  testParseRtypeDefinitions();
  testParseFuncDefinitions();
  testParseIncludeDefinitions();
  testParseStructDefDefinitions();
  testParseDefinitionDefinitions();
  testParseStartDefinitions();
}
